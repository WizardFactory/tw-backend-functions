
service: tw-backend-functions

plugins:
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-webpack

custom:
  dynamoGeoCodeDBTableName: "${opt:stage, self:provider.stage}-geocode"
  dynamoAddressDBTableName: "${opt:stage, self:provider.stage}-address"
  dynamodb:
    start:
      port: 8200
      inMemory: true
      migrate: true
    migration:
      dir: offline/migrations
  enabled:
    dev: false
    production: true
  webpack:
    includeModules: true

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: ap-northeast-2
  memorySize: 512
  timeout: 20
  environment:
    DYNAMODB_GEOCODE_TABLE: ${self:custom.dynamoGeoCodeDBTableName}
    DYNAMODB_ADDRESS_TABLE: ${self:custom.dynamoAddressDBTableName}
    DYNAMODB_OFFLINE_PORT: ${self:custom.dynamodb.start.port}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:custom.dynamoGeoCodeDBTableName}"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:custom.dynamoAddressDBTableName}"
    - Effect: Allow
      Action:
        - s3:*
      Resource: "*"

# you can add packaging information here
package:
  individually: true
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  geoinfobycoord:
    handler: geoinfo/handler.geoinfobycoord
    events:
      - http:
          path: geocode/coord/{loc}
          method: get
          cors: true
      - http:
          path: geocode/{version}/coord/{loc}
          method: get
          cors: true

  geoinfobyaddr:
    handler: geoinfo/handler.geoinfobyaddr
    events:
      - http:
          path: geocode/addr/{address}
          method: get
          cors: true
      - http:
          path: geocode/{version}/addr/{address}
          method: get
          cors: true

  weatherbycoord:
    handler: weather/handler.weatherbycoord
    events:
      - http:
          path: weather/coord/{loc}
          method: get
          cors: true
      - http:
          path: weather/{version}/coord/{loc}
          method: get
          cors: true

  weatherbyaddr:
    handler: weather/handler.weatherbyaddr
    events:
      - http:
          path: weather/addr/{address}
          method: get
          cors: true
      - http:
          path: weather/{version}/addr/{address}
          method: get
          cors: true

  copyKaqfsImagesToS3:
    handler: kaqfs/handler.copyKaqfsImagesToS3
    timeout: 60
    events:
      - schedule: cron(5 8,9,10,11,20,21,22,23 ? * * *)
        enabled: ${self:custom.enabled.${opt:stage, self:provider.stage}}

  requestAqicn:
    handler: aqicn/handler.requestAqicn
    timeout: 300
#    events:
#      - schedule: cron(1 * ? * * *)

resources:
  Resources:
    GeoCodeTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.dynamoGeoCodeDBTableName}
    AddressTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.dynamoAddressDBTableName}

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
